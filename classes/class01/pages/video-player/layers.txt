index.js -> Responsavel por chamarr todas as camadas.


Workers -> processo em segundo plano(le as regras da serviuce e executa em segundo plano).
    -> Toda a lógica pesada(que envolva CPU)
    -> Tudo que pode travar a tela(for, loop, machine learning, IA, Processamento Web CAM e etc...)
    -> Chama as regras de negócio da service.


Services -> quando o worker não estiver disponivel, ai entra a service diretamente.
    -> Toda a logica de negócios.
    -> Toda chamada externa (API, BD, arquivos, etc...).


View -> 
    -> Toda a parte de apresentação.
    -> Toda a parte de interação com o usuário.


controllers -> 
    -> Intermediaria entre a (services e/ou workers) e views.
    -> Responsavel por receber os dados da view e enviar para o services.


factories -> 
    -> Responsavel por importar as dependencias.
    -> Responsavel por criar objeto final para fazermos as chamadas.
    -> Retorna a funcção que iniciaizaa o fluxo dawueele componente(init).


